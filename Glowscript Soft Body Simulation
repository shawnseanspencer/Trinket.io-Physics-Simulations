from vpython import *

scene = canvas()

#Graph Settings
g1 = graph(xtitle = 'Time [s]', ytitle = 'mag(E) [N/C]')
f1 = gcurve()

#Constants
k = 9e9 #Nm^2/C^2
K = 10000
q0 = 3e-7 #C
m = 0.001 #kg
R = 0.2 #m
t = 0 #s
dt = 0.0001 #s
drag = 20

#Charge Count Parameters
n = 0
N = 6
bs = [] 
E = vector(0,0,0)
rt = vector(R,R,R)
#Generating Charges Inside Sphere
while n <= 1.5*N**2 + 9:
    spacing = (2*R)**(1/3)/N
    bs += sphere(pos = rt, radius = R/20, make_trail = False)
    rt.x += -spacing 
    if rt.x < -R :
        rt.x = R
        rt.y += -spacing
    if rt.y < -R:
        rt.y = R
        rt.z += -spacing
    
    n += 1
    
#Creating Springs (idk know how this works, its sloppy but it does lmao)
springs = []
rt = []
for i in range(len(bs)):
    for j in range(len(bs)):
        rt[j] = bs[j].pos-bs[i].pos
        
        if bs[i].pos.x == bs[j].pos.x and bs[i].pos.z == bs[j].pos.z and mag(rt[j]) < abs(spacing) + 0.01:
            springs += helix(pos=bs[i].pos,axis = rt[j], radius = R/30)
        
        
        if bs[i].pos.y == bs[j].pos.y and bs[i].pos.z == bs[j].pos.z and mag(rt[j]) < abs(spacing) + 0.01 and j%2 == 0:
            springs += helix(pos=bs[i].pos,axis = rt[j], radius = R/30)
        
        if bs[i].pos.y == bs[j].pos.y and bs[i].pos.x == bs[j].pos.x and mag(rt[j]) < abs(spacing) + 0.01 and -3*rt[i] in rt:
            springs += helix(pos=bs[i].pos,axis = rt[j], radius = R/30)

        
      
      
