
#Modeling Ideal Gas Law (Spherical Container)
from vpython import *
scene = canvas()

g1 = graph(xtitle = "Time (s)", ytitle = "KE (J)")
fK = gcurve(color = color.purple)
g2 = graph(xtitle = "Time (s)", ytitle = "Pressure (Pa)")
fP = gcurve(color = color.red)
g3 = graph(xtitle = "Time(s)", ytitle = "PV/KE")
fk = gcurve(color = color.green)

#Constants and Initial Parameters
R = 1 # m
m = 1 # kg
k = 10000 # Modeling Wall as a Powerful Spring
t = 0
dt = 0.001

shell = sphere(pos = vector(0,0,0), radius = R, opacity = 0.3, color = color.purple)
ishell = sphere(pos = vector(0,0,0), radius = R, opacity = 0.1, color = color.red)
v0 = 2

'''
Luckily, creating a normal distribution of the components of the 
particle velocities does yield a Maxwell-Boltzmann distribution
of velocities in 3D. Perhaps this is something I'd learn in a
Thermodynamics course. Had a little trouble with this, but I 
think it worked out. This forum post helped me realize that:
https://scicomp.stackexchange.com/questions/19969/how-do-i-generate-maxwell-boltzmann-variates-using-a-uniform-distribution-random

Also, after writing this code Dot Physics created a new video
covering basically this exact thing. Found a few errors in my own
code that his video helped me to correct.
'''

def normal(avg, std): #Box-Muller Transform To Create a Normal Distribution
    u1 = random()
    u2 = random()
    vt = sqrt(-2*log(u1)) * cos(2*pi*u2)
    vt = vt*std + avg
    return vt

#Creating lots of Balls
n = 0
N = 3000
bs = []    

while n < N:
    rt = R * vector(2*random()-1, 2*random()-1, 2*random()-1)
    if mag(rt) < R:
        n += 1
        bs += [sphere(pos = rt, radius = R/50, color = color.blue)]

for balls in bs:
    balls.m = m
    v = normal(v0, 0.3)
    balls.p = balls.m * v * norm(vector(2*random()-1, 2*random()-1, 2*random()-1))
    balls.F = vector(0,0,0)
        
#Average Kinetic Energy Function
def Kavg(bb):
    Ktot = 0
    for balls in bb:
        Ktot += mag(balls.p)**2/(2*m) 
    avgK = Ktot/len(bb)
    return avgK

#Pressure Function    
def P(bb, RT):
    Force = 0
    for balls in bb:
        Force += mag(balls.F)
    A = 4*pi*RT**2
    Pressure = Force/A
    return Pressure

dv = 0.0005 # change in volume (m^3)

#Models what happens if container decreases in size
expandingline = arrow(pos = vector(R,0,0), axis = vector(0,0,0))
while t < 1000: 
    rate(10000)
    Vol = 4*pi*R**3/3
    Vol += dv
    R = ((0.75*Vol)/pi)**(1/3)
    shell.radius = R
    for balls in bs:
        r = balls.pos
        balls.F = vector(0,0,0)
        if mag(r) > R:
            balls.F = -k * (mag(r) - R) * norm(r)
        balls.p += balls.F * dt
        balls.pos += balls.p/balls.m * dt
    expandingline.axis = vector(R-1,0,0)
    
    t += dt
    
    Pressure = P(bs,R)
    KE = Kavg(bs)
    
    #Plotting KE, Pressure, and PV/T against time (last should remain constant)
    fK.plot(t, KE)
    fP.plot(t, Pressure)
    fk.plot(t, Pressure*Vol/KE)


